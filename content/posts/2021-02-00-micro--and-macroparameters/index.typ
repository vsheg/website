#import "../../defs.typ": *

#show: post.with(
  date: "2021-02",
  date-modified: "2025-08-14",
  categories: (
    "molecular dynamics",
    "russian",
  ),
  references: "../assets/refs.haya.yml",
)

= Оценка термодинамических микро- и макропараметров в классической молекулярной динамике

Для описания МД систем применяют методы статистической механики, биологические системы обычно моделируют в NPT-ансамбле, в нём число частиц, давление и температура принимаются неизменными.

== Температура <sec-temperature>

Мгновенную полную энергию системы $E$ можно определить простым суммированием по кинетическим энергиям и по полным потенциалам взаимодействия двух частиц:
$
  E(t) = sum_i (m_i bold(v)_i^2 (t)) / 2 + sum_(i < j) U_(i,j),
$
каждое парное взаимодействие входит в выражение лишь единожды.

Температура непосредственно связана со средней (по частицам) кинетической энергией, приходящейся на одну степень свободы:
$
  T(t) = 2 / (3 k N) sum_i (m_i bold(v)_i^2 (t)) / 2,
$ <eq-T-instant>
видно, что температура неявным образом зависит от времени, что нарушает предпосылки NPT-ансамбля, это противоречие можно устранить введя ограничение на среднюю кинетическую скорость.

Согласно @eq-T-instant, разность мгновенной $T(t)$ и фиксированной в ансамбле $Theta$ температур
$
  Delta T = T(t) - Theta = 2 / (3 k N) { sum_i lambda^2 bold(v)_i^2(t) - sum_i bold(v)_i^2(t) },
$
коэффициент $lambda$ — некий параметр, показывающий среднее отклонение мгновенных скоростей от ожидаемых в условиях NPT-ансамбля, выделив явно:
$
  lambda = sqrt(Theta / T(t)),
$
этот параметр масштабирования скоростей включается на каждом шаге интегрирования:
$
  bold(v)_i (t + delta t) = lambda dot bold(v)_i (t) + bold(a)_i (t) dot delta t.
$

Существуют и другие подходы поддержания постоянной температуры в системе, они воспроизводят теплообмен с внешним источником тепловой энергии — _термостатом_, а сами называются _методами термостатирования_.

_Термостат Берендсена_ @Berendsen1984:
также вводит масштабирующий коэффициент скорости $lambda_"B"$ для каждого шага интегрирования:
$
  lambda_"B" = sqrt(1 + ((delta t) / Q) dot (Theta / T(t) - 1)),
$
интенсивность теплообмена между системой и термостатом учитывается выбором $Q$.

_Термостат Нозе-Гувера_ @Nose1984 @Hoover1985:
модифицирует #link("../2021-01-00-molecular-interactions/index.typ#newton2law", "уравнение движения"), масштабируя координаты и скорости системы через параметр
$
  lambda_"NG" = (1 / Q) { sum_i (m_i bold(v)_i^2 (t)) / 2 - 3 k N Theta },
$
где $Q$ учитывает интенсивность теплового обмена; задача МД сводится к решению систем уравнений движения вида
$
  dv(bold(r)_i (t), t, 2) = bold(F)_i / m_i - lambda_"NG" bold(v)_i,
$
$lambda_"NG"$ по сути является коэффициентом вязкого трения.

_Термостат Ланжевена_ @Podryga2014 @Davidchack2009 @Brunger2020:
основан на уравнениях движения броуновской динамики — вводятся две дополнительные силы: случайная составляющая $bold(a)$, вызывающая нагрев частиц, и диссипативная сила $bold(b)$, рассеивающая лишнюю энергию (по сути сила трения). Аналогично уравнению Ньютона, уравнение движения:
$
  m_i dot dv(bold(r)_i(t), t, 2) = sum_(i eq.not j) bold(F)_(i,j)(t) + bold(a)_i + bold(b)_i quad i,j = 1..N,
$
случайная составляющая распределена нормально:
$
  bold(a)_i ~ cal(N)(bold(0), bold(sigma)_i) quad "и" quad sigma_i = (m_i k Theta) / (delta t dot Q),
$
где вектора $bold(0), bold(sigma)_i in bb(R)^3$, $sigma_i$ — компонента $bold(sigma)$, $Q$ — параметр теплового обмена, $Theta$ — поддерживаемая температура. Для трения:
$
  bold(b)_i = - (Q m_i) / 2 dot dv(bold(r)_i, t).
$

== Давление <sec-pressure>

Для описания макропараметров реальных систем одни параметры раскладывают в степенной ряд по другим, например, по обратным степеням молярного объёма:
$
  P / (R T) = sum_(n = 1)^oo (B_i (T)) / V_m^(n - 1),
$
где $B_i (T)$ — функция, зависящая от температуры; такие уравнения называют _вириальными_. Вириальное уравнение не имеет чёткого физического смысла. Аналогичный подход используется и в МД, здесь мгновенное давление определяется вириальным соотношением
$
  P(t) = 1 / (3 V) sum_i { (bold(p)_i^2 (t)) / m_i + sum_(j eq.not i) bold(F)_i (t) dot bold(r)_(i,j) },
$
что, как и в случае температуры, противоречит предпосылкам NPT-ансамбля. Эту проблему решают алгоритмы _баростатирования_.

_Баростат Берендсена_ @Berendsen1984:
использует _принцип локального возмущения_, где изменение давления во времени определяется как
$
  dv(P(t), t) = (Phi - P(t)) / Q,
$
параметр $Q$ учитывает интенсивность баростата, $Phi$ — поддерживаемое им давление путём изменения размера системы: объём масштабируется с помощью коэффициента
$
  xi_"B" = beta_T / (3 Q) dot { P(t) - Phi },
$
изменение объёма записывается как
$
  Delta V = V(t) - V,
$ <eq-delta-V>
уравнения движения принимают вид:
$
  dv(bold(r)_i(t), t) = bold(v)_i - xi_"B" dot bold(r)_i.
$

_Баростат Нозе-Гувера_ @Nose1984 @Hoover1985:
аналогично вводит масштабирующий множитель:
$
  d xi_"NG" / d t = V(t) / Q dot { P(t) - Phi },
$
изменение объёма как в @eq-delta-V, уравнения движения:
$
  dv(bold(r)_i (t), t) = bold(v)_i - xi_"NG" dot bold(r)_i.
$

_Баростат Ланжевена_ @Feller1995:
основан на уравнениях Ланжевена и броуновской динамике. Принципы, лежащие в основе приведены в @sec-temperature, ввиду его сложных построений, ограничимся лишь указанием.

== Размер

Если не наложены ограничения на размеры системы, она сама заполнит предоставленный ей объём, так можно описывать молекулы в вакууме или в газе, однако в ходе такого моделирования частицы разлетятся на огромные расстояния, и нам рано или поздно не хватит размера машинных чисел даже для простого задания координат; поэтому разумным приближением будет введение некой _ячейки моделирования_, подойдя к границе которой частицы испытают либо упругое соударение, либо их координаты будут транслированы на противоположную сторону этой ячейки.

Периодические граничные условия @Bekker2004 могут задаваться прямоугольным параллелепипедом, гексагональной призмой, усечённым октаэдром, ромбическим додекаэдром; непериодические граничные условия можно задавать сферой.

В конденсированных фазах часто присутствует ближний и дальний порядок, это означает, что для описания всей системы достаточно описания небольшой её части. Здесь применение периодичности особенно полезно. Кроме того, за счёт изменения размеров ячейки моделирования возможно поддержание постоянного давления (@sec-pressure).
